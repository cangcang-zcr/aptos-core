// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `src/protos/demo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Transaction)
pub struct Transaction {
    // message fields
    // @@protoc_insertion_point(field:Transaction.hash)
    pub hash: ::std::string::String,
    // @@protoc_insertion_point(field:Transaction.version)
    pub version: u64,
    // @@protoc_insertion_point(field:Transaction.type)
    pub type_: ::protobuf::EnumOrUnknown<transaction::TransactionType>,
    // special fields
    // @@protoc_insertion_point(special_field:Transaction.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Transaction {
    fn default() -> &'a Transaction {
        <Transaction as ::protobuf::Message>::default_instance()
    }
}

impl Transaction {
    pub fn new() -> Transaction {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hash",
            |m: &Transaction| { &m.hash },
            |m: &mut Transaction| { &mut m.hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &Transaction| { &m.version },
            |m: &mut Transaction| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &Transaction| { &m.type_ },
            |m: &mut Transaction| { &mut m.type_ },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Transaction>(
            "Transaction",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Transaction {
    const NAME: &'static str = "Transaction";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.hash = is.read_string()?;
                },
                16 => {
                    self.version = is.read_uint64()?;
                },
                24 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.hash);
        }
        if self.version != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.version);
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(transaction::TransactionType::GENESIS) {
            my_size += ::protobuf::rt::int32_size(3, self.type_.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.hash.is_empty() {
            os.write_string(1, &self.hash)?;
        }
        if self.version != 0 {
            os.write_uint64(2, self.version)?;
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(transaction::TransactionType::GENESIS) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Transaction {
        Transaction::new()
    }

    fn clear(&mut self) {
        self.hash.clear();
        self.version = 0;
        self.type_ = ::protobuf::EnumOrUnknown::new(transaction::TransactionType::GENESIS);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Transaction {
        static instance: Transaction = Transaction {
            hash: ::std::string::String::new(),
            version: 0,
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Transaction {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Transaction").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Transaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Transaction {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Transaction`
pub mod transaction {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:Transaction.TransactionType)
    pub enum TransactionType {
        // @@protoc_insertion_point(enum_value:Transaction.TransactionType.GENESIS)
        GENESIS = 0,
        // @@protoc_insertion_point(enum_value:Transaction.TransactionType.USER)
        USER = 1,
        // @@protoc_insertion_point(enum_value:Transaction.TransactionType.BLOCK_METADATA)
        BLOCK_METADATA = 2,
        // @@protoc_insertion_point(enum_value:Transaction.TransactionType.STATE_CHECKPOINT)
        STATE_CHECKPOINT = 3,
    }

    impl ::protobuf::Enum for TransactionType {
        const NAME: &'static str = "TransactionType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<TransactionType> {
            match value {
                0 => ::std::option::Option::Some(TransactionType::GENESIS),
                1 => ::std::option::Option::Some(TransactionType::USER),
                2 => ::std::option::Option::Some(TransactionType::BLOCK_METADATA),
                3 => ::std::option::Option::Some(TransactionType::STATE_CHECKPOINT),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [TransactionType] = &[
            TransactionType::GENESIS,
            TransactionType::USER,
            TransactionType::BLOCK_METADATA,
            TransactionType::STATE_CHECKPOINT,
        ];
    }

    impl ::protobuf::EnumFull for TransactionType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Transaction.TransactionType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for TransactionType {
        fn default() -> Self {
            TransactionType::GENESIS
        }
    }

    impl TransactionType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<TransactionType>("Transaction.TransactionType")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15src/protos/demo.proto\"\xc1\x01\n\x0bTransaction\x12\x12\n\x04hash\
    \x18\x01\x20\x01(\tR\x04hash\x12\x18\n\x07version\x18\x02\x20\x01(\x04R\
    \x07version\x120\n\x04type\x18\x03\x20\x01(\x0e2\x1c.Transaction.Transac\
    tionTypeR\x04type\"R\n\x0fTransactionType\x12\x0b\n\x07GENESIS\x10\0\x12\
    \x08\n\x04USER\x10\x01\x12\x12\n\x0eBLOCK_METADATA\x10\x02\x12\x14\n\x10\
    STATE_CHECKPOINT\x10\x03J\xa7\x03\n\x06\x12\x04\0\0\x0e\x01\n\x08\n\x01\
    \x0c\x12\x03\0\0\x12\n\n\n\x02\x04\0\x12\x04\x02\0\x0e\x01\n\n\n\x03\x04\
    \0\x01\x12\x03\x02\x08\x13\n\x0c\n\x04\x04\0\x04\0\x12\x04\x04\x02\t\x03\
    \n\x0c\n\x05\x04\0\x04\0\x01\x12\x03\x04\x07\x16\n\r\n\x06\x04\0\x04\0\
    \x02\0\x12\x03\x05\x04\x10\n\x0e\n\x07\x04\0\x04\0\x02\0\x01\x12\x03\x05\
    \x04\x0b\n\x0e\n\x07\x04\0\x04\0\x02\0\x02\x12\x03\x05\x0e\x0f\n\r\n\x06\
    \x04\0\x04\0\x02\x01\x12\x03\x06\x04\r\n\x0e\n\x07\x04\0\x04\0\x02\x01\
    \x01\x12\x03\x06\x04\x08\n\x0e\n\x07\x04\0\x04\0\x02\x01\x02\x12\x03\x06\
    \x0b\x0c\n\r\n\x06\x04\0\x04\0\x02\x02\x12\x03\x07\x04\x17\n\x0e\n\x07\
    \x04\0\x04\0\x02\x02\x01\x12\x03\x07\x04\x12\n\x0e\n\x07\x04\0\x04\0\x02\
    \x02\x02\x12\x03\x07\x15\x16\n\r\n\x06\x04\0\x04\0\x02\x03\x12\x03\x08\
    \x04\x19\n\x0e\n\x07\x04\0\x04\0\x02\x03\x01\x12\x03\x08\x04\x14\n\x0e\n\
    \x07\x04\0\x04\0\x02\x03\x02\x12\x03\x08\x17\x18\n\x0b\n\x04\x04\0\x02\0\
    \x12\x03\x0b\x02\x12\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0b\x02\x08\n\
    \x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0b\t\r\n\x0c\n\x05\x04\0\x02\0\x03\
    \x12\x03\x0b\x10\x11\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x0c\x02\x15\n\x0c\
    \n\x05\x04\0\x02\x01\x05\x12\x03\x0c\x02\x08\n\x0c\n\x05\x04\0\x02\x01\
    \x01\x12\x03\x0c\t\x10\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0c\x13\x14\
    \n\x0b\n\x04\x04\0\x02\x02\x12\x03\r\x02\x1b\n\x0c\n\x05\x04\0\x02\x02\
    \x06\x12\x03\r\x02\x11\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\r\x12\x16\n\
    \x0c\n\x05\x04\0\x02\x02\x03\x12\x03\r\x19\x1ab\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Transaction::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(transaction::TransactionType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
